/**
 * recordThoughtÂ∑•ÂÖ∑‰ºòÂåñÊµãËØï - ÁÆÄÂåñÁâàÊú¨
 * 
 * ‰∏ìÈó®ÊµãËØïÊñπÊ°à1ÔºàÊ†ºÂºè‰ºòÂåñÔºâÂíåÊñπÊ°à2Ôºà‰ºòÂÖàÁ∫ßÊèêÂçáÔºâÁöÑÊ†∏ÂøÉÂäüËÉΩ
 * ÈÅøÂÖçÂ§çÊùÇÁöÑ‰æùËµñÈóÆÈ¢ò
 */

import { ThoughtRecord } from '../../tools/internal/recordThoughtTools';

// ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂåñÁöÑSpecialistExecutorÊµãËØïÁ±ªÔºåÂè™ÂåÖÂê´Êàë‰ª¨ÈúÄË¶ÅÊµãËØïÁöÑÊñπÊ≥ï
class TestSpecialistExecutor {
    /**
     * üöÄ ÊñπÊ°à1Êñ∞Â¢ûÔºöÊ†ºÂºèÂåñÊÄùËÄÉÂÜÖÂÆπ‰∏∫ÂèØËØªÊñáÊú¨
     */
    formatThoughtContent(content: any): string {
        if (typeof content === 'string') {
            return content;
        }

        if (typeof content === 'object' && content !== null) {
            // Â§ÑÁêÜÊï∞ÁªÑ
            if (Array.isArray(content)) {
                return JSON.stringify(content);
            }
            
            // Â∞ÜÂØπË±°ÈîÆÂÄºÂØπËΩ¨Êç¢‰∏∫ÂèØËØªÊ†ºÂºè
            return Object.entries(content)
                .map(([key, value]) => {
                    const formattedKey = key.replace(/([A-Z])/g, ' $1').toLowerCase();
                    const formattedValue = typeof value === 'string' ? value : JSON.stringify(value);
                    return `${formattedKey}: ${formattedValue}`;
                })
                .join('; ');
        }

        return JSON.stringify(content);
    }

    /**
     * üöÄ ÊñπÊ°à1ÔºöÂ§ÑÁêÜrecordThoughtÂ∑•ÂÖ∑ÁªìÊûúÁöÑÊ†ºÂºèÂåñ
     */
    summarizeRecordThoughtResult(result: any): string {
        const { success } = result;
        
        if (!success) {
            return `üí≠ recordThought Failed: ${result.error || 'Unknown Error'}`;
        }

        const thought = result.result.thoughtRecord;
        return `
üí≠ „Äê${thought.thinkingType.toUpperCase()}„ÄërecordThought
üìç Context: ${thought.context || 'No specific context'}
üß† Core Thinking: ${this.formatThoughtContent(thought.content)}
üìã Next Steps: ${thought.nextSteps?.join(' ‚Üí ') || 'No specific steps'}
‚è∞ ${new Date(thought.timestamp).toLocaleString()}`;
    }

    /**
     * üöÄ ÊñπÊ°à2Êñ∞Â¢ûÔºö‰ªéÂéÜÂè≤ËÆ∞ÂΩï‰∏≠ÊèêÂèñÊÄùËÄÉËÆ∞ÂΩï
     */
    extractThoughtRecords(internalHistory: string[]): {
        thoughtRecords: ThoughtRecord[],
        otherHistory: string[]
    } {
        const thoughtRecords: ThoughtRecord[] = [];
        const otherHistory: string[] = [];

        for (const entry of internalHistory) {
            // ÂåπÈÖçÊÄùËÄÉËÆ∞ÂΩïÊù°ÁõÆÔºàÊñπÊ°à1‰ºòÂåñÂêéÁöÑÊ†ºÂºèÔºâ
            const thoughtMatch = entry.match(/üí≠ „Äê(\w+)„ÄërecordThought\nüìç Context: (.*?)\nüß† Core Thinking: (.*?)\nüìã Next Steps: (.*?)\n‚è∞ (.*)/);

            if (thoughtMatch) {
                thoughtRecords.push({
                    thinkingType: thoughtMatch[1].toLowerCase() as any,
                    context: thoughtMatch[2] === 'No specific context' ? undefined : thoughtMatch[2],
                    content: thoughtMatch[3],
                    nextSteps: thoughtMatch[4] === 'No specific steps' ? [] : thoughtMatch[4].split(' ‚Üí '),
                    timestamp: thoughtMatch[5],
                    thoughtId: `extracted_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`
                });
            } else {
                otherHistory.push(entry);
            }
        }

        return { thoughtRecords: thoughtRecords.slice(-3), otherHistory }; // Âè™‰øùÁïôÊúÄËøë3Êù°ÊÄùËÄÉËÆ∞ÂΩï
    }

    /**
     * üöÄ ÊñπÊ°à2Êñ∞Â¢ûÔºöÊûÑÂª∫Â¢ûÂº∫ÁöÑÂéÜÂè≤ÊñáÊú¨
     */
    buildEnhancedHistory(thoughtRecords: ThoughtRecord[], otherHistory: string[]): string {
        let result = '';
        
        // üöÄ ‰ºòÂÖàÊ≥®ÂÖ•ÊÄùËÄÉËÆ∞ÂΩï
        if (thoughtRecords.length > 0) {
            result += `
## üß† Your Work Memory (Important Thinking Records)

${thoughtRecords.map((thought, index) => `
### Thinking ${index + 1}: ${thought.thinkingType}
- **Background**: ${thought.context || 'No specific context'}
- **Analysis**: ${thought.content}
- **Action**: ${thought.nextSteps && thought.nextSteps.length > 0 ? thought.nextSteps.join(' ‚Üí ') : 'To be determined'}
- **Time**: ${thought.timestamp}
`).join('\n')}

‚ö†Ô∏è **Important Guidance**: Please continue to work based on the above thinking records, avoid repeating the analysis of solved problems, and focus on the next action in the execution plan.

---

`;
        }
        
        // ÁÑ∂ÂêéÊ∑ªÂä†ÂÖ∂‰ªñÂéÜÂè≤ËÆ∞ÂΩï
        if (otherHistory.length > 0) {
            result += `## üìã Other Execution History\n\n${otherHistory.join('\n\n')}`;
        } else if (thoughtRecords.length === 0) {
            result += 'No internal iteration history';
        }
        
        return result;
    }
}

describe('recordThought Optimization Tests - Core Functionality', () => {
    let testExecutor: TestSpecialistExecutor;

    beforeEach(() => {
        testExecutor = new TestSpecialistExecutor();
    });

    describe('ÊñπÊ°à1: Ê†ºÂºè‰ºòÂåñÊµãËØï', () => {
        describe('formatThoughtContentÊñπÊ≥ï', () => {
            it('Â∫îËØ•Ê≠£Á°ÆÊ†ºÂºèÂåñÂ≠óÁ¨¶‰∏≤ÂÜÖÂÆπ', () => {
                const content = 'Simple string thinking';
                
                const result = testExecutor.formatThoughtContent(content);
                
                expect(result).toBe('Simple string thinking');
            });

            it('Â∫îËØ•Ê≠£Á°ÆÊ†ºÂºèÂåñÂØπË±°ÂÜÖÂÆπ', () => {
                const content = {
                    goal: 'Generate comprehensive NFR section',
                    approach: 'Analyze system characteristics',
                    challengeAreas: ['performance', 'scalability']
                };
                
                const result = testExecutor.formatThoughtContent(content);
                
                expect(result).toContain('goal: Generate comprehensive NFR section');
                expect(result).toContain('approach: Analyze system characteristics');
                expect(result).toContain('challenge areas: ["performance","scalability"]');
                expect(result).toContain(';'); // Á°Æ‰øù‰ΩøÁî®ÂàÜÂè∑ÂàÜÈöî
            });

            it('Â∫îËØ•Â§ÑÁêÜnullÂíåundefinedÂÜÖÂÆπ', () => {
                expect(testExecutor.formatThoughtContent(null)).toBe('null');
                expect(testExecutor.formatThoughtContent(undefined)).toBe(undefined);
            });

            it('Â∫îËØ•Â§ÑÁêÜÂµåÂ•óÂØπË±°', () => {
                const content = {
                    mainTask: 'Generate SRS',
                    subTasks: {
                        analysis: 'Requirement analysis',
                        design: 'System design'
                    }
                };
                
                const result = testExecutor.formatThoughtContent(content);
                
                expect(result).toContain('main task: Generate SRS');
                expect(result).toContain('sub tasks: {"analysis":"Requirement analysis","design":"System design"}');
            });

            it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÈ©ºÂ≥∞ÂëΩÂêçËΩ¨Êç¢', () => {
                const content = {
                    primaryGoalArea: 'Main objective',
                    secondaryTaskList: 'Supporting tasks'
                };
                
                const result = testExecutor.formatThoughtContent(content);
                
                expect(result).toContain('primary goal area: Main objective');
                expect(result).toContain('secondary task list: Supporting tasks');
            });
        });

        describe('summarizeRecordThoughtResultÊñπÊ≥ï', () => {
            it('Â∫îËØ•Ê†ºÂºèÂåñÊàêÂäüÁöÑrecordThoughtÁªìÊûú', () => {
                const mockResult = {
                    success: true,
                    result: {
                        thoughtRecord: {
                            thinkingType: 'planning',
                            context: 'SRS document generation task',
                            content: {
                                goal: 'Generate NFR section',
                                approach: 'Systematic analysis'
                            },
                            nextSteps: ['executeSemanticEdits', 'review_content'],
                            timestamp: '2025-09-23T12:34:56.789Z',
                            thoughtId: 'thought_123_abc'
                        }
                    }
                };
                
                const result = testExecutor.summarizeRecordThoughtResult(mockResult);
                
                expect(result).toContain('üí≠ „ÄêPLANNING„ÄërecordThought');
                expect(result).toContain('üìç Context: SRS document generation task');
                expect(result).toContain('üß† Core Thinking: goal: Generate NFR section; approach: Systematic analysis');
                expect(result).toContain('üìã Next Steps: executeSemanticEdits ‚Üí review_content');
                expect(result).toContain('‚è∞');
            });

            it('Â∫îËØ•Â§ÑÁêÜÂ§±Ë¥•ÁöÑrecordThoughtÁªìÊûú', () => {
                const mockResult = {
                    success: false,
                    error: 'Content validation failed'
                };
                
                const result = testExecutor.summarizeRecordThoughtResult(mockResult);
                
                expect(result).toBe('üí≠ recordThought Failed: Content validation failed');
            });

            it('Â∫îËØ•Â§ÑÁêÜÊ≤°Êúâ‰∏ä‰∏ãÊñáÁöÑÊÄùËÄÉËÆ∞ÂΩï', () => {
                const mockResult = {
                    success: true,
                    result: {
                        thoughtRecord: {
                            thinkingType: 'analysis',
                            content: 'Simple analysis',
                            timestamp: '2025-09-23T12:34:56.789Z',
                            thoughtId: 'thought_456_def'
                        }
                    }
                };
                
                const result = testExecutor.summarizeRecordThoughtResult(mockResult);
                
                expect(result).toContain('üìç Context: No specific context');
                expect(result).toContain('üìã Next Steps: No specific steps');
            });

            it('Â∫îËØ•Â§ÑÁêÜÂ≠óÁ¨¶‰∏≤Á±ªÂûãÁöÑÊÄùËÄÉÂÜÖÂÆπ', () => {
                const mockResult = {
                    success: true,
                    result: {
                        thoughtRecord: {
                            thinkingType: 'reflection',
                            context: 'Task review',
                            content: 'This is a simple string reflection',
                            nextSteps: ['continue_work'],
                            timestamp: '2025-09-23T12:34:56.789Z',
                            thoughtId: 'thought_string_test'
                        }
                    }
                };
                
                const result = testExecutor.summarizeRecordThoughtResult(mockResult);
                
                expect(result).toContain('üß† Core Thinking: This is a simple string reflection');
                expect(result).toContain('üìã Next Steps: continue_work');
            });
        });
    });

    describe('ÊñπÊ°à2: ‰ºòÂÖàÁ∫ßÊèêÂçáÊµãËØï', () => {
        describe('extractThoughtRecordsÊñπÊ≥ï', () => {
            it('Â∫îËØ•Ê≠£Á°ÆÊèêÂèñÊÄùËÄÉËÆ∞ÂΩï', () => {
                const internalHistory = [
                    'readFile: ‚úÖ ÊàêÂäü - ËØªÂèñÊñá‰ª∂ (1234Â≠óÁ¨¶)',
                    `
üí≠ „ÄêPLANNING„ÄërecordThought
üìç Context: Initial SRS generation
üß† Core Thinking: goal: Generate NFR section; approach: Systematic analysis
üìã Next Steps: readFile ‚Üí executeSemanticEdits
‚è∞ 2025/9/23 20:30:00`,
                    'executeMarkdownEdits: ‚úÖ ÊàêÂäü - Â∫îÁî®3‰∏™ÁºñËæëÊìç‰Ωú (245ms)',
                    `
üí≠ „ÄêREFLECTION„ÄërecordThought
üìç Context: Content review
üß† Core Thinking: quality: Good structure; improvements: Add metrics
üìã Next Steps: refine_content ‚Üí validate
‚è∞ 2025/9/23 20:35:00`
                ];
                
                const result = testExecutor.extractThoughtRecords(internalHistory);
                
                expect(result.thoughtRecords).toHaveLength(2);
                expect(result.otherHistory).toHaveLength(2);
                
                expect(result.thoughtRecords[0].thinkingType).toBe('planning');
                expect(result.thoughtRecords[0].context).toBe('Initial SRS generation');
                expect(result.thoughtRecords[0].nextSteps).toEqual(['readFile', 'executeSemanticEdits']);
                
                expect(result.thoughtRecords[1].thinkingType).toBe('reflection');
                expect(result.thoughtRecords[1].context).toBe('Content review');
                expect(result.thoughtRecords[1].nextSteps).toEqual(['refine_content', 'validate']);
            });

            it('Â∫îËØ•Â§ÑÁêÜÊ≤°ÊúâÊÄùËÄÉËÆ∞ÂΩïÁöÑÂéÜÂè≤', () => {
                const internalHistory = [
                    'readFile: ‚úÖ ÊàêÂäü - ËØªÂèñÊñá‰ª∂ (1234Â≠óÁ¨¶)',
                    'executeMarkdownEdits: ‚úÖ ÊàêÂäü - Â∫îÁî®3‰∏™ÁºñËæëÊìç‰Ωú (245ms)'
                ];
                
                const result = testExecutor.extractThoughtRecords(internalHistory);
                
                expect(result.thoughtRecords).toHaveLength(0);
                expect(result.otherHistory).toHaveLength(2);
            });

            it('Â∫îËØ•ÈôêÂà∂ÊúÄÂ§ö3Êù°ÊÄùËÄÉËÆ∞ÂΩï', () => {
                const internalHistory = [];
                
                // Ê∑ªÂä†5Êù°ÊÄùËÄÉËÆ∞ÂΩï
                for (let i = 1; i <= 5; i++) {
                    internalHistory.push(`
üí≠ „ÄêPLANNING„ÄërecordThought
üìç Context: Task ${i}
üß† Core Thinking: step: ${i}
üìã Next Steps: action_${i}
‚è∞ 2025/9/23 20:3${i}:00`);
                }
                
                const result = testExecutor.extractThoughtRecords(internalHistory);
                
                expect(result.thoughtRecords).toHaveLength(3); // Âè™‰øùÁïôÊúÄËøë3Êù°
                expect(result.thoughtRecords[0].content).toContain('step: 3');
                expect(result.thoughtRecords[2].content).toContain('step: 5');
            });

            it('Â∫îËØ•Â§ÑÁêÜÊ≤°Êúâ‰∏ä‰∏ãÊñáÂíåÊ≠•È™§ÁöÑÊÄùËÄÉËÆ∞ÂΩï', () => {
                const internalHistory = [`
üí≠ „ÄêANALYSIS„ÄërecordThought
üìç Context: No specific context
üß† Core Thinking: simple analysis
üìã Next Steps: No specific steps
‚è∞ 2025/9/23 20:30:00`];
                
                const result = testExecutor.extractThoughtRecords(internalHistory);
                
                expect(result.thoughtRecords).toHaveLength(1);
                expect(result.thoughtRecords[0].context).toBeUndefined();
                expect(result.thoughtRecords[0].nextSteps).toEqual([]);
            });

            it('Â∫îËØ•ÂøΩÁï•Ê†ºÂºè‰∏çÊ≠£Á°ÆÁöÑÊÄùËÄÉËÆ∞ÂΩï', () => {
                const internalHistory = [
                    'üí≠ „ÄêINVALID„ÄërecordThought', // Ê†ºÂºè‰∏çÂÆåÊï¥
                    'Normal tool result',
                    `
üí≠ „ÄêPLANNING„ÄërecordThought
üìç Context: Valid context
üß† Core Thinking: Valid thinking
üìã Next Steps: Valid steps
‚è∞ 2025/9/23 20:30:00` // Ê†ºÂºèÊ≠£Á°Æ
                ];
                
                const result = testExecutor.extractThoughtRecords(internalHistory);
                
                expect(result.thoughtRecords).toHaveLength(1); // Âè™ÊèêÂèñÊ†ºÂºèÊ≠£Á°ÆÁöÑ
                expect(result.otherHistory).toHaveLength(2); // ÂåÖÂê´Ê†ºÂºèÈîôËØØÁöÑÂíåÊ≠£Â∏∏ÁöÑÂ∑•ÂÖ∑ÁªìÊûú
                expect(result.thoughtRecords[0].context).toBe('Valid context');
            });
        });

        describe('buildEnhancedHistoryÊñπÊ≥ï', () => {
            it('Â∫îËØ•ÊûÑÂª∫ÂåÖÂê´ÊÄùËÄÉËÆ∞ÂΩïÁöÑÂ¢ûÂº∫ÂéÜÂè≤', () => {
                const thoughtRecords: ThoughtRecord[] = [
                    {
                        thinkingType: 'planning' as any,
                        context: 'Initial task',
                        content: 'Plan the approach',
                        nextSteps: ['step1', 'step2'],
                        timestamp: '2025/9/23 20:30:00',
                        thoughtId: 'thought_1'
                    },
                    {
                        thinkingType: 'analysis' as any,
                        content: 'Analyze the problem',
                        timestamp: '2025/9/23 20:35:00',
                        thoughtId: 'thought_2'
                    }
                ];
                const otherHistory = [
                    'readFile: ‚úÖ ÊàêÂäü',
                    'executeMarkdownEdits: ‚úÖ ÊàêÂäü'
                ];
                
                const result = testExecutor.buildEnhancedHistory(thoughtRecords, otherHistory);
                
                expect(result).toContain('## üß† Your Work Memory (Important Thinking Records)');
                expect(result).toContain('### Thinking 1: planning');
                expect(result).toContain('- **Background**: Initial task');
                expect(result).toContain('- **Analysis**: Plan the approach');
                expect(result).toContain('- **Action**: step1 ‚Üí step2');
                
                expect(result).toContain('### Thinking 2: analysis');
                expect(result).toContain('- **Background**: No specific context');
                expect(result).toContain('- **Action**: To be determined');
                
                expect(result).toContain('‚ö†Ô∏è **Important Guidance**');
                expect(result).toContain('## üìã Other Execution History');
                expect(result).toContain('readFile: ‚úÖ ÊàêÂäü');
            });

            it('Â∫îËØ•Â§ÑÁêÜÂè™ÊúâÊÄùËÄÉËÆ∞ÂΩïÊ≤°ÊúâÂÖ∂‰ªñÂéÜÂè≤ÁöÑÊÉÖÂÜµ', () => {
                const thoughtRecords: ThoughtRecord[] = [
                    {
                        thinkingType: 'planning' as any,
                        content: 'Plan only',
                        timestamp: '2025/9/23 20:30:00',
                        thoughtId: 'thought_1'
                    }
                ];
                const otherHistory: string[] = [];
                
                const result = testExecutor.buildEnhancedHistory(thoughtRecords, otherHistory);
                
                expect(result).toContain('## üß† Your Work Memory');
                expect(result).not.toContain('## üìã Other Execution History');
            });

            it('Â∫îËØ•Â§ÑÁêÜÊ≤°ÊúâÊÄùËÄÉËÆ∞ÂΩïÁöÑÊÉÖÂÜµ', () => {
                const thoughtRecords: ThoughtRecord[] = [];
                const otherHistory = ['readFile: ‚úÖ ÊàêÂäü'];
                
                const result = testExecutor.buildEnhancedHistory(thoughtRecords, otherHistory);
                
                expect(result).not.toContain('## üß† Your Work Memory');
                expect(result).toContain('## üìã Other Execution History');
            });

            it('Â∫îËØ•Â§ÑÁêÜÂÆåÂÖ®Á©∫ÁöÑÂéÜÂè≤', () => {
                const thoughtRecords: ThoughtRecord[] = [];
                const otherHistory: string[] = [];
                
                const result = testExecutor.buildEnhancedHistory(thoughtRecords, otherHistory);
                
                expect(result).toBe('No internal iteration history');
            });
        });
    });

    describe('ÈõÜÊàêÊµãËØï: ÊñπÊ°à1 + ÊñπÊ°à2', () => {
        it('Â∫îËØ•Á´ØÂà∞Á´ØÂú∞Â§ÑÁêÜrecordThoughtÂ∑•ÂÖ∑ÁªìÊûú', () => {
            // Ê®°ÊãürecordThoughtÂ∑•ÂÖ∑ÁªìÊûú
            const recordThoughtResult = {
                success: true,
                result: {
                    thoughtRecord: {
                        thinkingType: 'planning',
                        context: 'SRS generation',
                        content: {
                            strategy: 'Top-down approach',
                            focus: 'Quality attributes'
                        },
                        nextSteps: ['analyze_requirements', 'draft_sections'],
                        timestamp: '2025-09-23T12:34:56.789Z',
                        thoughtId: 'thought_integration_test'
                    }
                }
            };
            
            // Ê≠•È™§1: Ê†ºÂºèÂåñÂ∑•ÂÖ∑ÁªìÊûúÔºàÊñπÊ°à1Ôºâ
            const formattedResult = testExecutor.summarizeRecordThoughtResult(recordThoughtResult);
            
            expect(formattedResult).toContain('üí≠ „ÄêPLANNING„ÄërecordThought');
            expect(formattedResult).toContain('strategy: Top-down approach; focus: Quality attributes');
            
            // Ê≠•È™§2: Â∞ÜÊ†ºÂºèÂåñÁªìÊûúÊ∑ªÂä†Âà∞ÂéÜÂè≤ËÆ∞ÂΩï
            const internalHistory = [
                'readFile: ‚úÖ ÊàêÂäü - ËØªÂèñÊñá‰ª∂ (1000Â≠óÁ¨¶)',
                formattedResult,
                'executeMarkdownEdits: ‚úÖ ÊàêÂäü - Â∫îÁî®2‰∏™ÁºñËæëÊìç‰Ωú (150ms)'
            ];
            
            // Ê≠•È™§3: ÊèêÂèñÂíå‰ºòÂÖàÂ§ÑÁêÜÊÄùËÄÉËÆ∞ÂΩïÔºàÊñπÊ°à2Ôºâ
            const { thoughtRecords, otherHistory } = testExecutor.extractThoughtRecords(internalHistory);
            
            expect(thoughtRecords).toHaveLength(1);
            expect(thoughtRecords[0].thinkingType).toBe('planning');
            expect(thoughtRecords[0].context).toBe('SRS generation');
            expect(otherHistory).toHaveLength(2);
            
            // Ê≠•È™§4: ÊûÑÂª∫Â¢ûÂº∫ÂéÜÂè≤
            const enhancedHistory = testExecutor.buildEnhancedHistory(thoughtRecords, otherHistory);
            
            expect(enhancedHistory).toContain('## üß† Your Work Memory');
            expect(enhancedHistory).toContain('### Thinking 1: planning');
            expect(enhancedHistory).toContain('- **Background**: SRS generation');
            expect(enhancedHistory).toContain('## üìã Other Execution History');
        });

        it('Â∫îËØ•Â§ÑÁêÜÂ§öÁßçÊÄùËÄÉÁ±ªÂûãÁöÑÊ∑∑ÂêàÂú∫ÊôØ', () => {
            // ÂàõÂª∫ÂåÖÂê´‰∏çÂêåÊÄùËÄÉÁ±ªÂûãÁöÑÂú∫ÊôØ
            const planningResult = testExecutor.summarizeRecordThoughtResult({
                success: true,
                result: {
                    thoughtRecord: {
                        thinkingType: 'planning',
                        context: 'Initial planning',
                        content: 'Define the overall strategy',
                        nextSteps: ['research', 'design'],
                        timestamp: '2025-09-23T10:00:00.000Z',
                        thoughtId: 'thought_planning'
                    }
                }
            });
            
            const analysisResult = testExecutor.summarizeRecordThoughtResult({
                success: true,
                result: {
                    thoughtRecord: {
                        thinkingType: 'analysis',
                        context: 'Problem analysis',
                        content: { issues: ['complexity', 'dependencies'], solutions: ['modular approach'] },
                        nextSteps: ['implement_solution'],
                        timestamp: '2025-09-23T10:30:00.000Z',
                        thoughtId: 'thought_analysis'
                    }
                }
            });
            
            const internalHistory = [
                'Initial setup completed',
                planningResult,
                'Some intermediate work',
                analysisResult,
                'Final preparations'
            ];
            
            const { thoughtRecords, otherHistory } = testExecutor.extractThoughtRecords(internalHistory);
            const enhancedHistory = testExecutor.buildEnhancedHistory(thoughtRecords, otherHistory);
            
            expect(thoughtRecords).toHaveLength(2);
            expect(thoughtRecords[0].thinkingType).toBe('planning');
            expect(thoughtRecords[1].thinkingType).toBe('analysis');
            
            expect(enhancedHistory).toContain('### Thinking 1: planning');
            expect(enhancedHistory).toContain('### Thinking 2: analysis');
            expect(enhancedHistory).toContain('issues: ["complexity","dependencies"]; solutions: ["modular approach"]');
        });
    });

    describe('ËæπÁïåÊù°‰ª∂ÂíåÈîôËØØÂ§ÑÁêÜ', () => {
        it('Â∫îËØ•Â§ÑÁêÜÂ§çÊùÇÁöÑÊÄùËÄÉÂÜÖÂÆπÊ†ºÂºè', () => {
            const complexContent = {
                mainGoal: 'Complex task',
                subGoals: ['goal1', 'goal2'],
                metadata: {
                    priority: 'high',
                    estimatedTime: '2 hours'
                },
                specialChars: 'Content with: semicolons; and ‚Üí arrows'
            };
            
            const result = testExecutor.formatThoughtContent(complexContent);
            
            expect(result).toContain('main goal: Complex task');
            expect(result).toContain('sub goals: ["goal1","goal2"]');
            expect(result).toContain('special chars: Content with: semicolons; and ‚Üí arrows');
        });

        it('Â∫îËØ•Â§ÑÁêÜÁ©∫Êï∞ÁªÑÂíåÁ©∫ÂØπË±°', () => {
            expect(testExecutor.formatThoughtContent([])).toBe('[]');
            expect(testExecutor.formatThoughtContent({})).toBe('');
        });

        it('Â∫îËØ•Â§ÑÁêÜÊï∞Â≠óÂíåÂ∏ÉÂ∞îÂÄº', () => {
            expect(testExecutor.formatThoughtContent(42)).toBe('42');
            expect(testExecutor.formatThoughtContent(true)).toBe('true');
            expect(testExecutor.formatThoughtContent(false)).toBe('false');
        });
    });
});
